package com.brainacademy.gui.db.forms;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.ResourceBundle;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;

import com.brainacademy.gui.db.forms.listener.UserSelectedListener;
import com.brainacademy.gui.db.model.User;
import com.brainacademy.gui.db.service.UserService;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import lombok.Getter;
import lombok.Setter;

public class UsersForm {
    private final UserSelectedListener userSelectedListener;
    @Getter
    private JPanel usersPanel;

    private JTable table;
    private JPanel filterPanel;
    private JTextField userNametextField;

    private UserService userService = UserService.getInstance();
    private UserTableModel tableModel;

    public UsersForm(UserSelectedListener userSelectedListener) {
        this.userSelectedListener = userSelectedListener;

        $$$setupUI$$$();

        userNametextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                reloadData();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                reloadData();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                reloadData();
            }
        });

        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                sendUserSelected();
            }
        });

        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    sendUserAction();
                }
            }

        });
    }

    private void sendUserAction() {
        User user = getSelectedUser();
        if (userSelectedListener != null) {
            userSelectedListener.userAction(user);
        }
    }

    private User getSelectedUser() {
        int row = table.getSelectedRow();
        return tableModel.getUser(row);
    }

    private void sendUserSelected() {
        User user = getSelectedUser();
        if (userSelectedListener != null) {
            userSelectedListener.userSelected(user);
        }
    }

    private void reloadData() {
        List<User> users = userService.findByName(userNametextField.getText());
        tableModel.setData(users);
        table.revalidate();
    }

    private void createUIComponents() {
        tableModel = new UserTableModel();

        table = new JTable(tableModel);
        table.setShowGrid(true);
        table.setAutoCreateColumnsFromModel(true);
        table.setColumnSelectionAllowed(false);

        updateData();
    }

    private void updateData() {
        List<User> users = userService.getAllUsers();
        tableModel.setData(users);
        table.revalidate();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        usersPanel = new JPanel();
        usersPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), - 1, 6));
        usersPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4), null));
        filterPanel = new JPanel();
        filterPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), - 1, - 1));
        usersPanel.add(filterPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(- 1, 40), null, null, 0, false));
        filterPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font(filterPanel.getFont().getName(), filterPanel.getFont().getStyle(), filterPanel.getFont().getSize())));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("i18n/Bundle").getString("filter.user.name"));
        filterPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        userNametextField = new JTextField();
        filterPanel.add(userNametextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, - 1), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        usersPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setViewportView(table);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = - 1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (! haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return usersPanel;
    }

    private static class UserTableModel extends AbstractTableModel {
        private static final int ID = 0;
        private static final int NAME = 1;
        private static final int AGE = 2;

        private static final String[] columns = { "ID", "Имя", "Возраст" };

        @Getter
        @Setter
        private List<User> data;

        @Override
        public int getRowCount() {
            return data != null ? data.size() : 0;
        }

        @Override
        public String getColumnName(int column) {
            return columns[column];
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (data != null) {
                switch (columnIndex) {
                    case AGE:
                        return data.get(rowIndex).getAge();
                    case NAME:
                        return data.get(rowIndex).getName();
                    case ID:
                        return data.get(rowIndex).getId();
                }
            }

            return null;
        }

        public User getUser(int row) {
            if (data == null || row == - 1) {
                return null;
            }
            return data.get(row);
        }
    }
}
